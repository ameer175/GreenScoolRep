[{"D:\\GreenSchool\\client\\src\\index.js":"1","D:\\GreenSchool\\client\\src\\App.js":"2","D:\\GreenSchool\\client\\src\\ApolloProvider.js":"3","D:\\GreenSchool\\client\\src\\pages\\Home.js":"4","D:\\GreenSchool\\client\\src\\pages\\Login.js":"5","D:\\GreenSchool\\client\\src\\pages\\Profile.js":"6","D:\\GreenSchool\\client\\src\\components\\Navbar\\NavigationBar.js":"7","D:\\GreenSchool\\client\\src\\components\\Posts\\PostList.js":"8","D:\\GreenSchool\\client\\src\\components\\Posts\\PostItem.js":"9","D:\\GreenSchool\\client\\src\\pages\\Register.js":"10","D:\\GreenSchool\\client\\src\\pages\\RegisterConfirm.js":"11","D:\\GreenSchool\\client\\src\\util\\hooks.js":"12","D:\\GreenSchool\\client\\src\\context\\auth.js":"13","D:\\GreenSchool\\client\\src\\util\\AuthRoute.js":"14","D:\\GreenSchool\\client\\src\\components\\Posts\\PostUpload.js":"15","D:\\GreenSchool\\client\\src\\util\\GraphQL.js":"16","D:\\GreenSchool\\client\\src\\components\\LikeButton.js":"17","D:\\GreenSchool\\client\\src\\util\\MyPopup.js":"18","D:\\GreenSchool\\client\\src\\pages\\singlePost.js":"19","D:\\GreenSchool\\client\\src\\pages\\SinglePost.js":"20","D:\\GreenSchool\\client\\src\\components\\DeleteButton.js":"21","D:\\GreenSchool\\client\\src\\pages\\Statistics.js":"22","D:\\GreenSchool\\client\\src\\pages\\Organizations.js":"23","D:\\GreenSchool\\client\\src\\components\\Cards\\cards.js":"24","D:\\GreenSchool\\client\\src\\components\\Cards\\cardUI.js":"25","D:\\GreenSchool\\client\\src\\pages\\GarphStatistics.js":"26","D:\\GreenSchool\\client\\src\\pages\\GraphHelp.js":"27","D:\\GreenSchool\\client\\src\\pages\\GraphStatisticsFinish.js":"28","D:\\GreenSchool\\client\\src\\pages\\TableHelp.js":"29","D:\\GreenSchool\\client\\src\\pages\\CompareTable.js":"30","D:\\GreenSchool\\client\\src\\components\\Cards\\Maps.js":"31","D:\\GreenSchool\\client\\src\\components\\ImageUpload\\ImageUpload.js":"32","D:\\GreenSchool\\client\\src\\pages\\AllUsers.js":"33","D:\\GreenSchool\\client\\src\\components\\Users\\UserList.js":"34","D:\\GreenSchool\\client\\src\\components\\Users\\UserItem.js":"35"},{"size":157,"mtime":1610468649944,"results":"36","hashOfConfig":"37"},{"size":1567,"mtime":1614263052887,"results":"38","hashOfConfig":"37"},{"size":1394,"mtime":1615054544759,"results":"39","hashOfConfig":"37"},{"size":5006,"mtime":1629308722002,"results":"40","hashOfConfig":"37"},{"size":3078,"mtime":1610817957307,"results":"41","hashOfConfig":"37"},{"size":17362,"mtime":1614497699850,"results":"42","hashOfConfig":"37"},{"size":5322,"mtime":1615058907167,"results":"43","hashOfConfig":"37"},{"size":292,"mtime":1610895345407,"results":"44","hashOfConfig":"37"},{"size":4850,"mtime":1614433940199,"results":"45","hashOfConfig":"37"},{"size":3748,"mtime":1610817923763,"results":"46","hashOfConfig":"37"},{"size":1325,"mtime":1610817945134,"results":"47","hashOfConfig":"37"},{"size":471,"mtime":1610528998918,"results":"48","hashOfConfig":"37"},{"size":1485,"mtime":1610534942478,"results":"49","hashOfConfig":"37"},{"size":701,"mtime":1610536532335,"results":"50","hashOfConfig":"37"},{"size":4359,"mtime":1614432480247,"results":"51","hashOfConfig":"37"},{"size":1024,"mtime":1614262529771,"results":"52","hashOfConfig":"37"},{"size":1434,"mtime":1610543836134,"results":"53","hashOfConfig":"37"},{"size":206,"mtime":1610543847729,"results":"54","hashOfConfig":"37"},{"size":3496,"mtime":1610556920655,"results":"55","hashOfConfig":"37"},{"size":7357,"mtime":1614434136433,"results":"56","hashOfConfig":"37"},{"size":1866,"mtime":1610549317144,"results":"57","hashOfConfig":"37"},{"size":7880,"mtime":1610889423440,"results":"58","hashOfConfig":"37"},{"size":159,"mtime":1610796422925,"results":"59","hashOfConfig":"37"},{"size":3822,"mtime":1610817276692,"results":"60","hashOfConfig":"37"},{"size":5574,"mtime":1610898074507,"results":"61","hashOfConfig":"37"},{"size":1983,"mtime":1614421729427,"results":"62","hashOfConfig":"37"},{"size":893,"mtime":1610810464943,"results":"63","hashOfConfig":"37"},{"size":3087,"mtime":1610815127639,"results":"64","hashOfConfig":"37"},{"size":884,"mtime":1610876914036,"results":"65","hashOfConfig":"37"},{"size":3906,"mtime":1610898409531,"results":"66","hashOfConfig":"37"},{"size":1262,"mtime":1610885981103,"results":"67","hashOfConfig":"37"},{"size":2003,"mtime":1614092213409,"results":"68","hashOfConfig":"37"},{"size":1717,"mtime":1614263214151,"results":"69","hashOfConfig":"37"},{"size":433,"mtime":1614265109007,"results":"70","hashOfConfig":"37"},{"size":1765,"mtime":1614267079407,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"ykm0pm",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"74"},"D:\\GreenSchool\\client\\src\\index.js",[],["154","155"],"D:\\GreenSchool\\client\\src\\App.js",[],"D:\\GreenSchool\\client\\src\\ApolloProvider.js",["156","157"],"\r\n\r\nimport React from 'react';\r\nimport App from './App';\r\nimport {ApolloClient}from 'apollo-client';\r\n\r\nimport { InMemoryCache} from 'apollo-cache-inmemory';\r\nimport {createHttpLink } from 'apollo-link-http';\r\nimport {ApolloProvider} from '@apollo/react-hooks';\r\nimport { setContext } from 'apollo-link-context';\r\nimport {WebSocketLink} from  '@apollo/client/link/ws';\r\nimport {split, ApolloLink } from \"@apollo/client\";\r\nimport { getMainDefinition } from 'apollo-utilities';\r\n\r\n\r\n\r\n\r\nconst httpLink = createHttpLink({\r\n    uri:  'http://localhost:5000'\r\n});\r\n\r\nconst wsLink = new WebSocketLink({\r\n    uri: 'ws://localhost:5000',\r\n    options: {\r\n      reconnect: true\r\n    }\r\n});\r\nconst splitLink = split(\r\n    ({ query }) => {\r\n      const definition = getMainDefinition(query);\r\n      return (\r\n        definition.kind === 'OperationDefinition' &&\r\n        definition.operation === 'subscription'\r\n      );\r\n    },\r\n    wsLink,\r\n    httpLink,\r\n);\r\nconst authLink = setContext(() => {\r\n    const token = localStorage.getItem(\"jwtToken\");\r\n    return {\r\n        headers:{\r\n            Authorization : token ? `Bearer ${token}` : ''\r\n        }\r\n    }\r\n})\r\n\r\n\r\nconst client = new ApolloClient({\r\n    link: authLink.concat(ApolloLink.from([splitLink])),\r\n    cache: new InMemoryCache()\r\n});\r\n\r\n\r\n\r\nexport default (\r\n    <ApolloProvider client={client}>\r\n        <App />\r\n    </ApolloProvider>\r\n);","D:\\GreenSchool\\client\\src\\pages\\Home.js",["158","159","160"],"import {useQuery} from '@apollo/react-hooks';\r\nimport school1 from '../images/school1.jpeg';\r\nimport school2 from '../images/school2.jpeg';\r\nimport egod from '../images/egod.jpeg';\r\nimport '../css/Home.css';\r\nimport '../css/Header.css';\r\nimport PostList from '../components/Posts/PostList';\r\nimport PostUpload from '../components/Posts/PostUpload';\r\nimport  {FETCH_POSTS_QUERY , FETCH_USER} from '../util/GraphQL';\r\nimport {AuthContext} from '../context/auth';\r\nimport { useContext } from 'react';\r\nimport { Icon, Loader } from 'semantic-ui-react';\r\nimport {Image} from 'cloudinary-react';\r\n\r\n\r\n\r\n\r\n\r\nconst Home = () => {\r\n   \r\n    const date = new Date().getMonth();\r\n    const auth = useContext(AuthContext);\r\n    const {loading , data} = useQuery(FETCH_POSTS_QUERY);\r\n    \r\n    const {loading : loadingUser ,data:UserData} = useQuery(FETCH_USER,{\r\n        variables:{\r\n            username: auth.user.username \r\n        }\r\n    });\r\n    console.log(auth.user.image);\r\n    return ( \r\n\r\n        <div>\r\n                <div  className=\"content\">\r\n                    <div id=\"background\" className=\"wrapper\">\r\n \r\n                    { loadingUser? <Loader active inline='centered' /> : (\r\n                                <>\r\n                                {UserData &&\r\n                                    <>\r\n\r\n\r\n                        <div id='test' className=\"leftfixed\">\r\n                            <div  className=\"sidebarleft text-center p-4\">\r\n                        \r\n                                    <Image  cloudName='ddlf8wxvm' publicId={UserData.getUser.image}/>\r\n                                    <p id=\"sidename\">{UserData.getUser.name}</p>\r\n                                    <p id=\"ssn\">{UserData.getUser.address}</p>\r\n                                    <p id=\"country\">{UserData.getUser.phone}</p>\r\n                                    <p id=\"nosociety\"></p>\r\n                                    <p id=\"societyname\"><strong>{UserData.getUser.website}</strong></p>\r\n                           \r\n                            </div>\r\n                        </div>\r\n\r\n              \r\n                    { UserData.getUser.username.charAt(0) === 'S' &&\r\n                        <div  id=\"test\" className=\"rightfixed\">\r\n\r\n                            <div className=\"sidebarright\">\r\n                          \r\n                                    <p style={{fontFamily:'Calibri', textAlign:'right' , fontSize:'25px' , fontWeight:'600' , color:'teal'}}>מדדים</p>\r\n                                    <p style={{fontFamily:'Calibri', textAlign:'right' , fontSize:'18px' , fontWeight:'600' , color:'gray'}}>דפים - <span style={{color:'darkslategray'}}> {UserData.getUser.paper[date]} </span><span style={{fontSize:'12px'}}>ש\"ח לחודש זה </span> <Icon style={{paddingLeft:'10px'}} color='green' name='sticky note'></Icon></p>\r\n                                    <p style={{fontFamily:'Calibri', textAlign:'right' , fontSize:'18px' , fontWeight:'600' , color:'gray'}}>חשמל - <span style={{color:'darkslategray'}}> {UserData.getUser.electricity[date]} </span><span style={{fontSize:'12px'}}>ש\"ח לחודש זה </span> <Icon style={{paddingLeft:'10px'}} color='green' name='plug'></Icon></p>\r\n                                    <p style={{fontFamily:'Calibri', textAlign:'right' , fontSize:'18px' , fontWeight:'600' , color:'gray'}}>מים - <span style={{color:'darkslategray'}}> {UserData.getUser.water[date]} </span><span style={{fontSize:'12px'}}>ש\"ח לחודש זה </span> <Icon style={{paddingLeft:'10px'}} color='green' name='shower'></Icon></p>\r\n                                    <p style={{fontFamily:'Calibri', textAlign:'right' , fontSize:'18px' , fontWeight:'600' , color:'gray'}}>גז - <span style={{color:'darkslategray'}}> {UserData.getUser.gas[date]}</span> <span style={{fontSize:'12px'}}>ש\"ח לחודש זה </span> <Icon style={{paddingLeft:'10px'}} color='green' name='hotjar'></Icon></p>\r\n                                \r\n                            </div>\r\n\r\n                        </div>\r\n                    }\r\n \r\n                        </>\r\n                    }\r\n                 </> )\r\n                 }\r\n                        <div id=\"background\"  className=\"mainnotfixed\">\r\n  \r\n                           <PostUpload />\r\n\r\n\r\n                            <hr />\r\n\r\n        \r\n                            <div id=\"allpost\"  className=\"allpost\">\r\n                            {loading ? (\r\n                                <Loader active inline='centered' />\r\n                            ): (\r\n                                <div>\r\n                                    { data && <PostList items={data.getPosts} />}\r\n                                </div>\r\n                            )}\t \r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </div>\r\n                </div>   \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n         </div>\r\n\r\n    \r\n    );\r\n}\r\n\r\n\r\nexport default Home;","D:\\GreenSchool\\client\\src\\pages\\Login.js",[],"D:\\GreenSchool\\client\\src\\pages\\Profile.js",["161","162","163"],"\r\nimport '../css/Home.css';\r\nimport '../css/Header.css';\r\nimport '../css/Profile.css';\r\nimport { Button, Card, Container, Form, Grid, Icon, Loader, Modal, Segment } from 'semantic-ui-react';\r\nimport {Image} from 'cloudinary-react';\r\nimport {AuthContext} from '../context/auth';\r\nimport { useContext, useState } from 'react';\r\nimport  {FETCH_POSTS_QUERY , FETCH_USER} from '../util/GraphQL';\r\nimport { gql, useMutation, useQuery } from '@apollo/react-hooks';\r\nimport PostList from '../components/Posts/PostList';\r\nimport UseForm from '../util/hooks';\r\nimport { useParams } from 'react-router-dom';\r\nimport PostUpload from '../components/Posts/PostUpload';\r\nimport ImageUpload from '../components/ImageUpload/ImageUpload';\r\nimport axios from 'axios';\r\nimport { Col, Row } from 'react-bootstrap';\r\n\r\n\r\nconst Profile = () => {\r\n    const date = new Date().getMonth();\r\n    const {loading: loadingPosts , data: PostsData} = useQuery(FETCH_POSTS_QUERY);\r\n    const userId = useParams().userId;\r\n    const [open, setOpen] = useState(false);\r\n \r\n    const [btn,setBtn] = useState(true);\r\n    let context = useContext(AuthContext);\r\n\r\n\r\n    const [name, setname] = useState(false);\r\n    const [phone, setphone] = useState(false);\r\n    const [address, setaddress] = useState(false);\r\n    const [website, setwebsite] = useState(false);\r\n    const [email, setemail] = useState(false);\r\n    const [image,setImage] = useState(null);    \r\n    const [loadImage,setLoadImage] = useState(null);\r\n\r\n\r\n\r\n\r\n \r\n    async function onInputChange(e) {\r\n        setLoadImage(true);\r\n\r\n           const formData = new FormData();\r\n           formData.append('file',e.target.files[0]);\r\n           formData.append('upload_preset','xgpstnd9');\r\n           let FakeEvent;\r\n   \r\n           const response = await axios.post(\r\n           `https://api.cloudinary.com/v1_1/ddlf8wxvm/image/upload`,\r\n           formData,\r\n           ).then((response) =>{\r\n               setImage(response.data.public_id);\r\n               // Going arround the e.target.value , name for OnChange function\r\n                FakeEvent = {\r\n                target: {\r\n                    name:'image',\r\n                    value:response.data.public_id\r\n                }\r\n            }\r\n            });\r\n            onChange(FakeEvent);\r\n        \r\n        \r\n           \r\n   };\r\n\r\n    const {loading,data} = useQuery(FETCH_USER,{\r\n        variables:{\r\n            username: userId\r\n        }\r\n    });\r\n    const {values , onChange , onSubmit } = UseForm(createPostCallback , {\r\n\r\n        phone:data? data.getUser.phone : context.user.phone,\r\n        username: userId,\r\n        address:data? data.getUser.address : context.user.address,\r\n        website:data? data.getUser.website : context.user.website,\r\n        email:data? data.getUser.email : context.user.email,\r\n        name:data? data.getUser.name : context.user.name,\r\n        image:data? data.getUser.image : context.user.image\r\n      \r\n    });\r\n\r\n    const [submitUpdate] = useMutation(SUBMIT_UPDATE_MUTATION, {\r\n        \r\n        variables: {\r\n            phone:values.phone,\r\n            name:values.name,\r\n            username: userId,\r\n            address:values.address,\r\n            website:values.website,\r\n            email:values.email,\r\n            image:values.image\r\n        },\r\n        refetchQueries:[{query:FETCH_USER , variables:{username: context.user.username}}]\r\n   \r\n      });\r\n\r\n  \r\n    function createPostCallback() {\r\n        submitUpdate();\r\n    }\r\n    function checkValues(){\r\n      if(name!==false && address!==false && website!==false && email!==false && phone!==false){\r\n            return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    function setFalse () {\r\n        setBtn(false);\r\n    };\r\n    const onChange2 = e =>{\r\n        switch(e.target.name){\r\n            case 'name':\r\n                setname(e.target.value);\r\n                break;\r\n            case 'address':\r\n                setaddress(e.target.value);\r\n                break;\r\n            case 'website':\r\n                setwebsite(e.target.value);\r\n                break;\r\n            case 'email':\r\n                setemail(e.target.value);\r\n                break;\r\n            case 'phone':\r\n                setphone(e.target.value);\r\n                break;\r\n            \r\n            default:\r\n                                \r\n        }\r\n        onChange(e);\r\n    }\r\n\r\n    async function setTrue () {\r\n        if(checkValues())\r\n            setBtn(true);\r\n    };\r\n    return ( \r\n\r\n        <div>\r\n                <div class=\"content\">\r\n                    <div id=\"background\" class=\"wrapper\">\r\n                        <div id=\"background\" style={{float:'left', width:'750px'}}>\r\n                             \r\n                               <Grid id=\"grid\">\r\n                                   <Grid.Row>\r\n                                       <Card fluid>\r\n                                           <Card.Content>\r\n                                           {  loading? <Loader active inline='centered' /> : (\r\n                                                    <>{ data &&\r\n                                                        <> \r\n                                                            <Card.Description   className=\" text-center pb-4\"><Image style={{borderRadius:'50%' , height: '150px' , width:'160px' ,  verticalAlign: 'middle' }}    cloudName='ddlf8wxvm' publicId={data.getUser.image}/></Card.Description>\r\n                                                            <Card.Header style={{textAlign:'center' , fontFamily:'Calibri', fontSize:'25px'}}>{data.getUser.name}</Card.Header>\r\n                                                            <Card.Meta style={{textAlign:'center' , color:'gray', fontFamily:'Calibri', fontSize:'20px'}}>{data.getUser.address}</Card.Meta>\r\n                                                        </>\r\n                                                    }</>\r\n                                                    )\r\n                                                    }\r\n                                            <Card.Description style={{textAlign:'center'}}>\r\n\r\n\r\n                                            <Modal\r\n                                            onClose={() => setOpen(false)}\r\n                                            onOpen={() => setOpen(true)}\r\n                                            open={open}\r\n                                            trigger={context.user.username===userId && <Button  onClick={setFalse} color='green'>ערוך פרופיל</Button>}\r\n                                            >\r\n                                            <Modal.Content image>\r\n                                               \r\n                                                <Modal.Description >\r\n                                                <Form onSubmit={onSubmit}  className={loading? 'loading' : ''}>\r\n                                                        <Segment >\r\n                                                    {  loading? <Loader active inline='centered' /> : (\r\n                                                    <>{ data &&\r\n                                                        <>\r\n                                                            <div  className='text-center m-auto teto'>\r\n                                                                <Col md={4}></Col>\r\n                                                                   <Col  md={4}>\r\n                                                                     <Row style={{alignItems:'center' }}  className='text-center'>\r\n                                                                       {    loadImage==null? null :\r\n                                                                            <>\r\n                                                                            {\r\n                                                                                image==null? <Loader active inline='centered' /> :\r\n                                                                                <Image style={{borderRadius:'50%' , height: '150px' , width:'160px' ,  verticalAlign: 'middle' }}    cloudName='ddlf8wxvm' publicId={image}/>  \r\n                                                                            }\r\n                                                                            </>\r\n                                                                        }   \r\n                                                                     </Row>\r\n                                                                     <Row className='text-center'>\r\n                                                                        <input onChange={onInputChange} style={{maxWidth:'300px' , border:0, height:'50px'}}  name='image' type='file'  values={values.image}/>\r\n                                                                     </Row>\r\n                                                                   </Col>\r\n                                                                   <Col md={4}></Col>\r\n                                                            </div>\r\n                                                        <Form.Input style={{minWidth:'400px'}} required  fluid name='name' onChange={onChange2}   values={values.name} icon='user' iconPosition='left' placeholder={data.getUser.name} />\r\n                                                        <Form.Input style={{minWidth:'400px'}} required   fluid name='phone' onChange={onChange2}  values={values.phone} icon='phone' iconPosition='left' placeholder={data.getUser.phone} />\r\n                                                        <Form.Input style={{minWidth:'400px'}} required   fluid name='email' onChange={onChange2}  values={values.email} icon='mail' iconPosition='left' placeholder={data.getUser.email} />\r\n                                                        <Form.Input style={{minWidth:'400px'}} required   fluid name='website' onChange={onChange2}  values={values.website} icon='chrome' iconPosition='left' placeholder={data.getUser.website} />\r\n                                                        <Form.Input style={{minWidth:'400px'}} required   fluid name='address' onChange={onChange2}   values={values.address} icon='home' iconPosition='left' placeholder={data.getUser.address} />\r\n\r\n                                                        </>\r\n                                                    }</>\r\n                                                    )\r\n                                                    }\r\n                                                        <Button onClick={setTrue} type=\"submit\" color={!btn? 'grey' : 'green'} fluid size='large'>\r\n                                                            {!btn? \"Change\" : \"Changed!\"}\r\n                                                        </Button>\r\n                                                        </Segment>\r\n                                                </Form>\r\n                                                </Modal.Description>\r\n                                            </Modal.Content>\r\n                                            <Modal.Actions>\r\n                                                <Button\r\n                                                content=\"זהו סיימתי\"\r\n                                                labelPosition='right'\r\n                                                fontFamily='Calibri'\r\n                                                icon='checkmark'\r\n                                                onClick={() => setOpen(false)}\r\n                                                positive\r\n                                                />\r\n                                            </Modal.Actions>\r\n                                            </Modal>\r\n\r\n\r\n\r\n                                            </Card.Description>\r\n                                           </Card.Content>\r\n\r\n\r\n                                  {loading ? ( <Loader active inline='centered' />) : (\r\n                                     \r\n                                         <> {data && <Card.Content extra>\r\n                                            <Card.Meta id=\"gedo\" style={{textAlign:'right' , fontFamily:'Calibri', fontSize:'20px' , paddingRight:'20px'}}> {data.getUser.phone} - טלפון <Icon  size='small' name='phone'></Icon> </Card.Meta>\r\n                                            <Card.Meta id=\"gedo\" style={{textAlign:'right' , fontFamily:'Calibri', fontSize:'20px' , paddingRight:'20px'}}> {data.getUser.email} - דואר אלקטרוני <Icon  size='small' name='mail'></Icon> </Card.Meta>\r\n                                            <Card.Meta id=\"gedo\" style={{textAlign:'right' , fontFamily:'Calibri', fontSize:'20px' , paddingRight:'20px'}}> {data.getUser.website} - אתר <Icon  size='small' name='chrome'></Icon> </Card.Meta>\r\n                                            <Card.Meta id=\"gedo\" style={{textAlign:'right' , fontFamily:'Calibri', fontSize:'20px' , paddingRight:'20px'}}>{data.getUser.address} - כתובת<Icon  size='small' name='home'></Icon> </Card.Meta>\r\n                                            <Card.Meta id=\"gedo\" style={{textAlign:'right' , fontFamily:'Calibri', fontSize:'20px' , paddingRight:'20px'}}> {data.getUser.date} - שנת יצור <Icon  size='small' name='clock'></Icon> </Card.Meta>\r\n                                        </Card.Content>}</>\r\n\r\n\r\n                                  )}      \r\n                                           \r\n                                       \r\n                                       </Card>\r\n                                   </Grid.Row>\r\n\r\n                               </Grid>\r\n                                    \r\n                   \r\n\r\n                               {loadingPosts? <div className=\"pt-5 mt-5\"><Loader active inline='centered' /> </div>: (\r\n                                   <div id=\"grid2\" className=\"pt-5 pb-5 pr-2 mr-5\">\r\n                                                    { context.user.username === userId &&\r\n                                                        <div>\r\n                                                            <PostUpload />\r\n                                                        </div>\r\n                                                    }\r\n\r\n                                       {PostsData && <PostList items={PostsData.getPosts.filter(post => post.username === userId)}/>}\r\n                                    </div>\r\n                               )}\r\n                             \r\n                        </div>\r\n\r\n                        {loading ? ( <Loader active inline='centered' />) : (\r\n                                     \r\n                        <> {data && data.getUser.username.charAt(0)==='S' &&  \r\n                        <div id='test' className=\"rightfixed\">\r\n\r\n                            <div className=\"sidebarright\">\r\n\r\n                                    <p style={{fontFamily:'Calibri', textAlign:'right' , fontSize:'25px' , fontWeight:'600' , color:'teal'}}>מדדים</p>\r\n                                    <p style={{fontFamily:'Calibri', textAlign:'right' , fontSize:'18px' , fontWeight:'600' , color:'gray'}}>דפים - <span style={{color:'darkslategray'}}> {data.getUser.paper[date]} </span><span style={{fontSize:'12px'}}>ש\"ח לחודש זה </span> <Icon style={{paddingLeft:'10px'}} color='green' name='sticky note'></Icon></p>\r\n                                    <p style={{fontFamily:'Calibri', textAlign:'right' , fontSize:'18px' , fontWeight:'600' , color:'gray'}}>חשמל - <span style={{color:'darkslategray'}}> {data.getUser.electricity[date]} </span><span style={{fontSize:'12px'}}>ש\"ח לחודש זה </span> <Icon style={{paddingLeft:'10px'}} color='green' name='plug'></Icon></p>\r\n                                    <p style={{fontFamily:'Calibri', textAlign:'right' , fontSize:'18px' , fontWeight:'600' , color:'gray'}}>מים - <span style={{color:'darkslategray'}}> {data.getUser.water[date]} </span><span style={{fontSize:'12px'}}>ש\"ח לחודש זה </span> <Icon style={{paddingLeft:'10px'}} color='green' name='shower'></Icon></p>\r\n                                    <p style={{fontFamily:'Calibri', textAlign:'right' , fontSize:'18px' , fontWeight:'600' , color:'gray'}}>גז - <span style={{color:'darkslategray'}}> {data.getUser.gas[date]}</span> <span style={{fontSize:'12px'}}>ש\"ח לחודש זה </span> <Icon style={{paddingLeft:'10px'}} color='green' name='hotjar'></Icon></p>\r\n                                \r\n                            </div>\r\n\r\n                            </div>\r\n                        }</>\r\n\r\n                     )}          \r\n\r\n\r\n\r\n                    </div>  \r\n\r\n                </div>\r\n        </div> \r\n    );\r\n}\r\n \r\n\r\n\r\nconst SUBMIT_UPDATE_MUTATION = gql`\r\n  mutation update($phone:String! , $address:String! , $website:String! , $email:String!, $username:String! , $name:String! , $image:String!)  {\r\n    updateUser(updateInput:{\r\n        phone: $phone,\r\n        address: $address,\r\n        website: $website,\r\n        email: $email,\r\n        name:$name,\r\n        username:$username,\r\n        image:$image\r\n    }) {\r\n        phone address website email username name image\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n\r\nexport default Profile;","D:\\GreenSchool\\client\\src\\components\\Navbar\\NavigationBar.js",["164","165"],"import React, { useContext } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {Navbar , Nav } from 'react-bootstrap';\r\nimport './NavigationBar.css';\r\nimport { Container, Icon, Loader } from 'semantic-ui-react';\r\nimport {AuthContext} from '../../context/auth';\r\nimport { gql, useMutation, useQuery,useSubscription } from '@apollo/react-hooks';\r\nimport { FETCH_USER } from '../../util/GraphQL';\r\nimport {Image} from 'cloudinary-react';\r\n\r\n\r\nconst NEW_LIKE = gql`\r\n\r\n    subscription{\r\n        newLike{\r\n            id\r\n            description\r\n            commentCount\r\n            username\r\n            name\r\n        }\r\n    }\r\n\r\n`;\r\n\r\n\r\nconst NavigationBar = () => {\r\n        const context = useContext(AuthContext);\r\n        const s='sad';\r\n        const {loading,data} = useQuery(FETCH_USER,{\r\n            variables:{\r\n                username: context.user? context.user.username : null\r\n            }\r\n        });\r\n\r\n        const { data: notifData , loading:notifLoad } = useSubscription(\r\n            NEW_LIKE\r\n          );\r\n        return (     \r\n            <Container style={{width:'100%' , padding:'0'}}>\r\n                  \r\n                    <Navbar collapseOnSelect expand=\"lg\" className=\"navbar navbar-expand-md navbar-dark  border-bottom shadow-sm\">\r\n                            <Container>\r\n                                \r\n                            \r\n                        <Navbar.Toggle className=\"custom-toggler\" aria-controls=\"responsive-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <Navbar.Brand  id=\"Green\" href=\"/\">GreenIT</Navbar.Brand>\r\n                      \r\n                        {context.user &&<>\r\n                            {loading?  <Loader active inline='centered' /> : ( data && <> \r\n                                <Nav.Link id=\"miniuser\">   <Image  style={{borderRadius:'50%' , height: '50px' , width:'50px' ,  verticalAlign: 'middle' }}   cloudName='ddlf8wxvm' publicId={data.getUser.image}/></Nav.Link>\r\n                                <Nav.Link id=\"miniuser\" style={{ fontFamily:'Calibri', marginLeft:'-22px' }} href={`/${data.getUser.username}/Profile`}>{data.getUser.name}</Nav.Link>\r\n                                \r\n                            </>)}\r\n                        <Nav.Link style={{ fontFamily:'Calibri' }} onClick={context.logout} id=\"Home\" href=\"/login\"><Icon size='small' name=\"sign-out\"></Icon>התנתק </Nav.Link>\r\n                     \r\n\r\n                        <Nav className=\"ml-auto\">\r\n                            \r\n                           \r\n                            <Nav.Link style={{fontSize:'larger' , fontFamily:'Calibri' }}   id=\"Home\" href=\"/AllUsers\">משתמשים</Nav.Link>\r\n                            <div id='v2' className=\"vl\"></div>\r\n                            {context.user.type==='1' && <> <Nav.Link style={{fontSize:'larger' , fontFamily:'Calibri' }} id=\"Home\" href=\"/\">הטבות</Nav.Link>\r\n                            <div id='v2' className=\"vl\"></div>\r\n                            <Nav.Link style={{fontSize:'larger' , fontFamily:'Calibri' }} id=\"Home\" href=\"/statistics\">נתונים סטטיסטיים</Nav.Link>\r\n                            <div id='v2' className=\"vl\"></div>\r\n                            <Nav.Link style={{fontSize:'larger' , fontFamily:'Calibri' }} id=\"Home\" href=\"/organizations\">ארגונים ירוקים</Nav.Link> </>}\r\n\r\n\r\n                            {context.user.type==='2' && <>\r\n                            <Nav.Link style={{fontSize:'larger' , fontFamily:'Calibri' }} id=\"Home\" href=\"/GraphHelp\">גרף השוואות</Nav.Link>\r\n                            <div id='v2' className=\"vl\"></div>\r\n                            <Nav.Link style={{fontSize:'larger' , fontFamily:'Calibri' }} id=\"Home\" href=\"/TableHelp\">טבלת השוואות</Nav.Link> </>}\r\n\r\n                            <div id='v2' className=\"vl\"></div>\r\n                            <Nav.Link style={{fontSize:'larger' , fontFamily:'Calibri' }}  id=\"Home\" href=\"/\">לוח שנה</Nav.Link>\r\n                            <div id='v2' className=\"vl\"></div>\r\n                            <Nav.Link style={{fontSize:'larger' , fontFamily:'Calibri' }}   id=\"Home\" href={`/${context.user.username}/Profile`}>פרופיל שלי</Nav.Link>\r\n                            <div id='v2' className=\"vl\"></div>\r\n                            <Nav.Link style={{fontSize:'larger' , fontFamily:'Calibri' }}   id=\"Home\" href=\"/\">דף הבית</Nav.Link>\r\n                            <div id='v2' className=\"vl\"></div>\r\n                            <Nav.Link style={{fontSize:'larger' , fontFamily:'Calibri' }} class=\"notif\" id=\"notif\" href=\"#\"><Icon name='bell'></Icon>\r\n                            <div id=\"notify\"  >\r\n                                    <hr style={{background:'white',width:'90%'}}></hr>\r\n                                    <p>{notifLoad? 'Loading...' : notifData && notifData.newLike.username}</p>\r\n                            </div>\r\n                            </Nav.Link>\r\n       \r\n                        </Nav></>}\r\n                       \r\n                        </Navbar.Collapse>\r\n                        </Container>\r\n                    </Navbar>\r\n            </Container>\r\n        );\r\n   \r\n}\r\n\r\n \r\nexport default NavigationBar;","D:\\GreenSchool\\client\\src\\components\\Posts\\PostList.js",[],"D:\\GreenSchool\\client\\src\\components\\Posts\\PostItem.js",["166","167","168","169","170","171","172","173"],"import { Button, Confirm, Icon, Label , Loader, Modal } from \"semantic-ui-react\";\r\nimport school1 from '../../images/school1.jpeg';\r\nimport school2 from '../../images/school2.jpeg';\r\nimport egod from '../../images/egod.jpeg';\r\nimport G1 from '../../images/G1.jpg';\r\n\r\nimport moment from 'moment';\r\nimport { Link } from \"react-router-dom\";\r\nimport {AuthContext} from '../../context/auth';\r\nimport { useContext, useState } from \"react\";\r\nimport LikeButton from '../LikeButton';\r\nimport MyPopup from \"../../util/MyPopup\";\r\nimport {Image} from 'cloudinary-react';\r\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\r\nimport { FETCH_POSTS_QUERY, FETCH_USER } from \"../../util/GraphQL\";\r\nimport PostUpload from \"./PostUpload\";\r\nimport UseForm from \"../../util/hooks\";\r\nimport gql from 'graphql-tag';\r\n\r\n\r\n\r\nconst PostItem = ({post:{description,id,name,username,createdAt,likeCount,commentCount,likes,image}}) => {\r\n \r\n\r\n    const context = useContext(AuthContext);\r\n    const [confirmOpen, setConfirmOpen] = useState(false);\r\n    const {loading : loadingUser ,data:UserData} = useQuery(FETCH_USER,{\r\n        variables:{\r\n            username:username\r\n        }\r\n    });\r\n\r\n\r\n \r\n    \r\n    const [createPost , {error}] = useMutation(CREATE_POST , {\r\n      \r\n            variables: {\r\n                description: description,\r\n                image:image\r\n            },\r\n            update(proxy,result){\r\n                const data = proxy.readQuery({\r\n                    query: FETCH_POSTS_QUERY\r\n                });\r\n                data.getPosts = [result.data.createPost , ...data.getPosts];\r\n                proxy.writeQuery({query:FETCH_POSTS_QUERY , data})\r\n\r\n            }\r\n\r\n       \r\n    })\r\n    function createPostCallback() {\r\n        createPost();\r\n        setConfirmOpen(false);\r\n    }\r\n\r\n\r\n   \r\n    \r\n    return (\r\n            <div>\r\n\r\n        { loadingUser? <Loader active inline='centered' /> :\r\n         (\r\n            \r\n          \r\n               \r\n            <div  className=\"mainpost p-5\">\r\n                <Link className=\"test\" style={{textDecoration:'none'}}  to={`/posts/${id}`}>\r\n                <div  className=\"userimg\"><Image cloudName='ddlf8wxvm' publicId={UserData && UserData.getUser.image}/></div>\r\n                <div className=\"username\"><p className=\"name\">{UserData && UserData.getUser.name}</p></div>\r\n                <p  className=\"time float-left\">{moment(createdAt).fromNow(true)}</p>\r\n                <div style={{paddingTop:'20px'}}>\r\n                <p className=\"quotes\">\r\n                    {description}\r\n                </p>\r\n                </div>\r\n                \r\n                <div className=\"post\">\r\n                    <Image  size=\"huge\" className=\"postimg\" cloudName='ddlf8wxvm' publicId={image}/>\r\n                </div>\r\n                </Link>\r\n                <div className=\"likedislike pt-4\">\r\n                    \r\n                    <LikeButton user={context.user} post={{ id,likes,likeCount  }}/>  \r\n                    <MyPopup content=\"Comment on post\">\r\n                    <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\r\n                        <Button color=\"blue\" basic>\r\n                        <Icon name=\"comments\" />\r\n                        </Button>\r\n                        <Label basic color=\"blue\" pointing=\"left\">\r\n                        {commentCount}\r\n                        </Label>\r\n                    </Button>\r\n                   \r\n                    </MyPopup>\r\n   \r\n\r\n                    \r\n                        <Button color=\"blue\"  onClick={() => setConfirmOpen(true)}  basic style={{borderRadius:'5px'}}>\r\n                        <Icon name=\"share\" />\r\n                              Share\r\n                        </Button>\r\n     \r\n                        <Confirm\r\n                            open={confirmOpen}\r\n                            onCancel={() => setConfirmOpen(false)}\r\n                            onConfirm={createPostCallback}\r\n                            content={`Are You Sure? By pressing ok you will be sharing this post to your profile.`}\r\n                                    \r\n                        />\r\n         \r\n\r\n                  \r\n                </div>\r\n                \r\n\r\n            </div>\r\n            \r\n            \r\n                    \r\n        )\r\n\r\n        }\r\n\r\n\r\n</div>\r\n\r\n      );\r\n}\r\n \r\n\r\nconst CREATE_POST = gql`\r\n\r\n    mutation createPost(\r\n        $description: String! , $image:String!\r\n    ){\r\n        createPost(description:$description , image:$image){\r\n            id description createdAt username name\r\n            likes{\r\n                id username createdAt \r\n            }\r\n            likeCount\r\n            comments{\r\n                id body username createdAt\r\n            }\r\n            commentCount\r\n            image\r\n        }\r\n    }\r\n`;\r\n \r\nexport default PostItem;","D:\\GreenSchool\\client\\src\\pages\\Register.js",[],"D:\\GreenSchool\\client\\src\\pages\\RegisterConfirm.js",[],"D:\\GreenSchool\\client\\src\\util\\hooks.js",[],"D:\\GreenSchool\\client\\src\\context\\auth.js",[],"D:\\GreenSchool\\client\\src\\util\\AuthRoute.js",[],"D:\\GreenSchool\\client\\src\\components\\Posts\\PostUpload.js",["174"],"import gql from 'graphql-tag';\r\nimport React, { useState } from 'react';\r\nimport useForm from '../../util/hooks';\r\nimport {useMutation} from '@apollo/react-hooks';\r\nimport  {FETCH_POSTS_QUERY} from '../../util/GraphQL';\r\nimport axios from 'axios';\r\nimport Image from 'cloudinary-react/lib/components/Image';\r\nimport { Form, Loader } from 'semantic-ui-react';\r\nimport './Post.css'\r\n\r\nconst PostUpload = () => {\r\n\r\n    const [image,setImage] = useState(null);\r\n    const [loadImage,setLoadImage] = useState(null);\r\n\r\n    let FakeEvent;\r\n\r\n    \r\n    async function onInputChange(e) {\r\n        setLoadImage(true);\r\n        const formData = new FormData();\r\n        formData.append('file',e.target.files[0]);\r\n        formData.append('upload_preset','xgpstnd9');\r\n\r\n        const response = await axios.post(\r\n        `https://api.cloudinary.com/v1_1/ddlf8wxvm/image/upload`,\r\n        formData,\r\n        ).then((response) =>{\r\n            setImage(response.data.public_id);\r\n            // Going arround the e.target.value , name for OnChange function\r\n             FakeEvent = {\r\n             target: {\r\n                 name:'image',\r\n                 value:response.data.public_id\r\n             }\r\n         }\r\n         });\r\n\r\n      \r\n         onChange(FakeEvent);\r\n     \r\n     \r\n        \r\n};\r\n\r\n    const {values , onChange , onSubmit } = useForm(createPostCallback , {\r\n        description : '',\r\n        image:''\r\n    });\r\n\r\n \r\n    \r\n    const [createPost , {error}] = useMutation(CREATE_POST , {\r\n      \r\n            variables: values,\r\n            update(proxy,result){\r\n                const data = proxy.readQuery({\r\n                    query: FETCH_POSTS_QUERY\r\n                });\r\n                data.getPosts = [result.data.createPost , ...data.getPosts];\r\n                proxy.writeQuery({query:FETCH_POSTS_QUERY , data})\r\n                values.description = '';\r\n            }\r\n\r\n       \r\n    })\r\n        function createPostCallback() {\r\n        createPost();\r\n    }\r\n    \r\n    function test(){\r\n        setImage(null);\r\n        setLoadImage(null);\r\n\r\n    }\r\n\r\n\r\n    return ( \r\n              <>\r\n              \r\n              \r\n            <div className=\"main mainpost\" style={{marginBottom:'20px', paddingBottom:'20px'}}>\t\r\n\r\n                    <p className=\"quotes\">\r\n                        <textarea name=\"description\" value={values.description} onChange={onChange} style={{textAlign:'right' , fontFamily: 'Calibri'}} placeholder=\"שתף רעיון, תמונה\"></textarea>\r\n                    </p>\r\n                    <div className=\"text-center p-3\">\r\n                    {    loadImage==null? null :\r\n                        <>\r\n                               {\r\n                                   image==null? <Loader active inline='centered' /> :\r\n                                   <Image className='image-adjust2' cloudName='ddlf8wxvm' publicId={image}  wrapped ui={false}/>\r\n\r\n                               }\r\n                       </>\r\n                    } \r\n                    \r\n                    </div>\r\n\r\n                    <Form className=\"postbar\" onSubmit={onSubmit}>\r\n                        <input  id=\"chooseimg\" onChange={onInputChange} name='image' type='file'  values={values.image}/>\r\n                        <button type=\"button\" className=\"imgbttn\" id=\"imgbttn\">&#x1f4f7; תמונה</button>\r\n                        <button type=\"submit\" onClick={test} id=\"postmypost\" className=\"postmypost\" >פרסם</button>\r\n                    </Form>\r\n\r\n                   \r\n\r\n            </div>\r\n            {error && (\r\n                <div className=\"ui error message\">\r\n                    <ul className=\"list\">\r\n                         <li>{error && error.graphQLErrors[0]?error.graphQLErrors[0].message: {}}</li>\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </>\r\n     );\r\n}\r\n\r\n\r\nconst CREATE_POST = gql`\r\n\r\n    mutation createPost(\r\n        $description: String! , $image:String!\r\n    ){\r\n        createPost(description:$description , image:$image){\r\n            id description createdAt username name\r\n            likes{\r\n                id username createdAt \r\n            }\r\n            likeCount\r\n            comments{\r\n                id body username createdAt\r\n            }\r\n            commentCount\r\n            image\r\n        }\r\n    }\r\n`;\r\n \r\nexport default PostUpload;","D:\\GreenSchool\\client\\src\\util\\GraphQL.js",[],"D:\\GreenSchool\\client\\src\\components\\LikeButton.js",[],"D:\\GreenSchool\\client\\src\\util\\MyPopup.js",[],"D:\\GreenSchool\\client\\src\\pages\\singlePost.js",[],"D:\\GreenSchool\\client\\src\\pages\\SinglePost.js",["175","176","177"],"import React, { useContext, useState, useRef } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport moment from 'moment';\r\nimport {\r\n  Button,\r\n  Card,\r\n  Form,\r\n  Grid,\r\n  Icon,\r\n  Label,\r\n  Container\r\n} from 'semantic-ui-react';\r\nimport {Image} from 'cloudinary-react';\r\n\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport LikeButton from '../components/LikeButton';\r\nimport DeleteButton from '../components/DeleteButton';\r\nimport upload from '../images/upload.png'\r\nimport { Link } from 'react-router-dom';\r\nimport test from '../images/test.jpg';\r\nimport { FETCH_USER } from '../util/GraphQL';\r\n\r\nfunction SinglePost(props) {\r\n  const postId = props.match.params.postId;\r\n  const { user } = useContext(AuthContext);\r\n  const commentInputRef = useRef(null);\r\n\r\n\r\n  const [comment, setComment] = useState('');\r\n\r\n\r\n  const {data} = useQuery(FETCH_POST_QUERY,{\r\n      variables:{\r\n          postId \r\n      }\r\n  });\r\n  \r\n \r\n\r\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\r\n    update() {\r\n      setComment('');\r\n      commentInputRef.current.blur();\r\n    },\r\n    variables: {\r\n      postId,\r\n      body: comment,\r\n      name:user.name\r\n    }\r\n  });\r\n\r\n  function deletePostCallback() {\r\n    props.history.push('/');\r\n  }\r\n  let postMarkup;\r\n  let usernameprofile;\r\n  if(!data){\r\n    postMarkup = <p>Loading ...</p>\r\n  }\r\n  else{\r\n    usernameprofile = data.getPost.username;\r\n  }\r\n  \r\n  const {loading : loadingUser ,data:UserData} = useQuery(FETCH_USER,{\r\n    variables:{\r\n        username:usernameprofile? usernameprofile : ''\r\n    }\r\n});\r\n  if(!data){\r\n      postMarkup = <p> Loading ..</p>\r\n  }else{\r\n\r\n        const  {id , description ,createdAt, username ,name ,likes , comments , likeCount , commentCount , image} = data.getPost;\r\n        postMarkup = (\r\n          <Container className=\"p-5\">\r\n              <Grid>\r\n                <Grid.Row>\r\n                    <Grid.Column width={2}>\r\n                     \r\n                    </Grid.Column>\r\n                    <Grid.Column id=\"allpost2\" width={10}>\r\n                        <Card fluid>\r\n                        <Card.Content>\r\n                        { loadingUser ? <p>Loading ...</p> :\r\n                         \r\n                        \r\n                         <div  className=\"userimg\"> <Image  style={{borderRadius:'50%' , height: '70px' , width:'70px' , padding:'1%' , marginTop:'-10px',marginLeft:'10px'  }} id=\"imgsmall\" cloudName='ddlf8wxvm' publicId={UserData && UserData.getUser.image}/> </div>\r\n                     }\r\n                        <Card.Header style={{textAlign:'right'}}><Link to={`/${username}/profile`}>{UserData && UserData.getUser.name}</Link></Card.Header>\r\n                        <Card.Meta style={{textAlign:'right'}}>{moment(createdAt).fromNow()}</Card.Meta>\r\n                        <Card.Description  className=\" text-center pb-4\"><Image className='image-adjust2' cloudName='ddlf8wxvm' publicId={image}/></Card.Description>\r\n                        \r\n                        <Card.Description style={{textAlign:'right' , padding:'10px'}}>{description}</Card.Description>\r\n                        </Card.Content>\r\n                        <hr />\r\n                        <Card.Content extra>\r\n                                <LikeButton user={user} post={{id,likeCount,likes}} />\r\n                                <Button\r\n                                    as=\"div\"\r\n                                    labelPosition=\"right\"\r\n                                    onClick={() => console.log('Comment on post')}\r\n                                >\r\n                                    <Button basic color=\"blue\">\r\n                                    <Icon name=\"comments\" />\r\n                                    </Button>\r\n                                    <Label basic color=\"blue\" pointing=\"left\">\r\n                                    {commentCount}\r\n                                    </Label>\r\n                                </Button>\r\n                                {user && user.username === username && (\r\n                                   <> <DeleteButton postId={id} callback={deletePostCallback} />\r\n                                    <Button className=\"float-right\">עריכה</Button> </>\r\n                                )}\r\n                        </Card.Content>\r\n                        </Card>\r\n                        {user && (\r\n                        <Card fluid>\r\n                          <Card.Content>\r\n                            <p>Post a comment</p>\r\n                            <Form>\r\n                              <div className=\"ui action input fluid\">\r\n                                <input\r\n                                  type=\"text\"\r\n                                  placeholder=\"Comment..\"\r\n                                  name=\"comment\"\r\n                                  value={comment}\r\n                                  onChange={(event) => setComment(event.target.value)}\r\n                                  ref={commentInputRef}\r\n                                />\r\n                                <button\r\n                                  type=\"submit\"\r\n                                  className=\"ui button teal\"\r\n                                  style={{height:'30px'}}\r\n                                  disabled={comment.trim() === ''}\r\n                                  onClick={submitComment}\r\n                                >\r\n                                  Submit\r\n                                </button>\r\n                              </div>\r\n                            </Form>\r\n                          </Card.Content>\r\n                        </Card>\r\n                      )}\r\n                       {comments.map((comment) => (\r\n                        <Card fluid key={comment.id}>\r\n                          <Card.Content>\r\n                            {user && user.username === comment.username && (\r\n                              <DeleteButton postId={id} commentId={comment.id} />\r\n                            )}\r\n                            <Card.Header>{comment.name}</Card.Header>\r\n                            <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\r\n                            <Card.Description>{comment.body}</Card.Description>\r\n                          </Card.Content>\r\n                        </Card>\r\n                      ))}\r\n                    </Grid.Column>\r\n                    \r\n                </Grid.Row>\r\n            </Grid>\r\n          </Container>\r\n\r\n        );\r\n  }\r\n  return postMarkup;\r\n}\r\n\r\nconst SUBMIT_COMMENT_MUTATION = gql`\r\n  mutation($postId: String!, $body: String! , $name:String!) {\r\n    createComment(postId: $postId, body: $body , name:$name) {\r\n      id\r\n      comments {\r\n        id\r\n        body\r\n        createdAt\r\n        username\r\n        name\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nconst FETCH_POST_QUERY = gql`\r\n    query Test($postId: ID!){\r\n\r\n     getPost(postId: $postId) {\r\n        id\r\n        description\r\n        image\r\n        createdAt\r\n        username\r\n        name\r\n        likeCount\r\n        likes {\r\n        username\r\n        }\r\n        commentCount\r\n        comments {\r\n        name\r\n        id\r\n        username\r\n        createdAt\r\n        body\r\n    }\r\n  }\r\n}\r\n`;\r\nexport default SinglePost;\r\n","D:\\GreenSchool\\client\\src\\components\\DeleteButton.js",[],"D:\\GreenSchool\\client\\src\\pages\\Statistics.js",[],"D:\\GreenSchool\\client\\src\\pages\\Organizations.js",[],"D:\\GreenSchool\\client\\src\\components\\Cards\\cards.js",[],"D:\\GreenSchool\\client\\src\\components\\Cards\\cardUI.js",[],"D:\\GreenSchool\\client\\src\\pages\\GarphStatistics.js",[],"D:\\GreenSchool\\client\\src\\pages\\GraphHelp.js",[],"D:\\GreenSchool\\client\\src\\pages\\GraphStatisticsFinish.js",[],"D:\\GreenSchool\\client\\src\\pages\\TableHelp.js",[],"D:\\GreenSchool\\client\\src\\pages\\CompareTable.js",["178"],"\r\nimport React, { useState } from 'react'\r\nimport {  Button, Container, Dropdown, Table } from 'semantic-ui-react';\r\nimport '../components/Cards/card-style.css';\r\nimport PostUpload from '../components/Posts/PostUpload';\r\nconst options = [\r\n    { key: 'Paper', text: 'דפים', value: 'Paper' },\r\n    { key: 'Water', text: 'מים', value: 'Water' },\r\n    { key: 'Gas', text: 'גז', value: 'Gas' },\r\n    { key: 'Electricity', text: 'חשמל', value: 'Electricity' },\r\n  ];\r\nconst CompareTable = props => {\r\n    const month = new Date().getMonth();\r\n    const prevMonth = new Date();\r\n    prevMonth.setMonth(prevMonth.getMonth() - 1);\r\n    const [Choosen , setChoosen] = useState();\r\n\r\n\r\n\r\n\r\n\r\n    const  displayChoosen = (e, data) =>{\r\n        setChoosen(data.value);\r\n    };\r\n    function calc(user){\r\n        return ((user[prevMonth.getMonth()] / user[month] ) * 100).toFixed(1);\r\n    }\r\n\r\n\r\n\r\n    return ( \r\n            <Container className=\"p-5\">\r\n             <h2 style={{padding:'0' , paddingTop:'20px' , paddingBottom:'30px'}}>בחר מדד להשוות</h2>\r\n             <div className=\"text-center pt-5\">\r\n             <Dropdown        placeholder=\"חשמל\"\r\n                                        onChange={displayChoosen}\r\n                                        fluid\r\n                                        search\r\n                                        selection\r\n                                        defaultValue={1}\r\n                                        style={{marginBottom:'20px' , textAlign:'right'}}\r\n                                        options={options}/>\r\n\r\n            </div>\r\n            \r\n             <Table textAlign='right' color='green' key='green'>\r\n                <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>יצירת פוסט</Table.HeaderCell>\r\n                    <Table.HeaderCell>אחוז</Table.HeaderCell>\r\n                    <Table.HeaderCell>חודש שעבר</Table.HeaderCell>\r\n                    <Table.HeaderCell>חודש זה</Table.HeaderCell>\r\n                    <Table.HeaderCell>מדד</Table.HeaderCell>\r\n                    <Table.HeaderCell>בית ספר</Table.HeaderCell>\r\n                </Table.Row>\r\n                </Table.Header>\r\n\r\n                <Table.Body>\r\n               {    props.users.map( user => ( user.username.charAt(0) !== 'E' &&\r\n\r\n                    <Table.Row>\r\n                        <Table.Cell> <a href=\"#popup2\" className=\"btn btn-outline-success\"> יצירת פוסט </a> </Table.Cell>\r\n                    \r\n                        <Table.Cell>{Choosen==='Paper'? calc(user.paper) : Choosen==='Water'? calc(user.water) : Choosen==='Gas'? calc(user.gas) : calc(user.electricity)}%</Table.Cell>\r\n                        <Table.Cell>{Choosen==='Paper'? user.paper[prevMonth.getMonth()] : Choosen==='Water'? user.water[prevMonth.getMonth()] : Choosen==='Gas'? user.gas[prevMonth.getMonth()] : user.electricity[prevMonth.getMonth()]}</Table.Cell>\r\n                        <Table.Cell>{Choosen==='Paper'? user.paper[month] : Choosen==='Water'? user.water[month] : Choosen==='Gas'? user.gas[month] : user.electricity[month]}</Table.Cell>\r\n                        <Table.Cell>{Choosen==='Paper'? 'דפים' : Choosen==='Water'? 'מים' : Choosen==='Gas'? 'גז' : 'חשמל'}</Table.Cell>\r\n                        <Table.Cell>{user.name}</Table.Cell>\r\n                    </Table.Row>\r\n\r\n               ))}\r\n                </Table.Body>\r\n            </Table>\r\n            <div style={{width:'50vw',height:'50vh'}} id=\"popup2\" className=\"popup\">\r\n                <a href=\"#1\" className=\"close\">&times;</a>  \r\n                            <p className=\"mr-5\"> אחרי כתיבת פוסט ללחוץ פעם אחת על פרסם </p>\r\n                            <PostUpload />\r\n            </div>\r\n            </Container > \r\n    );\r\n}\r\n \r\nexport default CompareTable;","D:\\GreenSchool\\client\\src\\components\\Cards\\Maps.js",[],["179","180"],"D:\\GreenSchool\\client\\src\\components\\ImageUpload\\ImageUpload.js",[],"D:\\GreenSchool\\client\\src\\pages\\AllUsers.js",["181","182","183","184","185","186","187","188","189","190","191"],"import {useQuery} from '@apollo/react-hooks';\r\nimport school1 from '../images/school1.jpeg';\r\nimport school2 from '../images/school2.jpeg';\r\nimport egod from '../images/egod.jpeg';\r\nimport '../css/Home.css';\r\nimport '../css/Header.css';\r\nimport PostList from '../components/Posts/PostList';\r\nimport PostUpload from '../components/Posts/PostUpload';\r\nimport  {FETCH_POSTS_QUERY , FETCH_USER, FETCH_USERS_QUERY} from '../util/GraphQL';\r\nimport {AuthContext} from '../context/auth';\r\nimport { useContext } from 'react';\r\nimport { Icon, Loader } from 'semantic-ui-react';\r\nimport {Image} from 'cloudinary-react';\r\nimport UserList from '../components/Users/UserList';\r\n\r\n\r\n\r\n\r\n\r\nconst Home = () => {\r\n   \r\n    const date = new Date().getMonth();\r\n    const auth = useContext(AuthContext);\r\n    const {loading , data} = useQuery(FETCH_USERS_QUERY);\r\n    \r\n    \r\n    return ( \r\n\r\n        <div>\r\n                <div  className=\"content\">\r\n                    <div id=\"background\" className=\"wrapper\">\r\n \r\n                    { loading? <Loader active inline='centered' /> : (\r\n                                <>\r\n                                {data &&\r\n                                    <>\r\n\r\n\r\n\r\n                                <div>\r\n                                    { data && <UserList items={data.getUsers} />}\r\n                                </div>\r\n                            \r\n\r\n              \r\n                   \r\n \r\n                        </>\r\n                    }\r\n                 </> )\r\n                 }\r\n                        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </div>\r\n                </div>   \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n         </div>\r\n\r\n    \r\n    );\r\n}\r\n\r\n\r\nexport default Home;","D:\\GreenSchool\\client\\src\\components\\Users\\UserList.js",[],"D:\\GreenSchool\\client\\src\\components\\Users\\UserItem.js",["192","193","194","195","196","197","198","199","200","201","202"],"import { Button, Card, Container, Icon, Label , Loader } from \"semantic-ui-react\";\r\n\r\nimport moment from 'moment';\r\nimport { Link } from \"react-router-dom\";\r\nimport {AuthContext} from '../../context/auth';\r\nimport { useContext } from \"react\";\r\nimport LikeButton from '../LikeButton';\r\nimport MyPopup from \"../../util/MyPopup\";\r\nimport {Image} from 'cloudinary-react';\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { FETCH_USER } from \"../../util/GraphQL\";\r\nimport './User.css'\r\n\r\nconst UserItem = ({User:{id,phone,address,email,website,image,date,gas,water,paper,username,name,electricity}}) => {\r\n    const context = useContext(AuthContext);\r\n\r\n    return (\r\n      \r\n        <li className=\"user-item\">\r\n\r\n                    <Card>\r\n                        <Image className='image-adjust' cloudName='ddlf8wxvm' publicId={image}  wrapped ui={false}/>\r\n                        <Card.Content>\r\n                        \r\n                        <Card.Header><Link to={`/${username}/profile`}>{name}</Link></Card.Header>\r\n                        <Card.Meta>\r\n                            <span  className='date'>Joined in {date}</span>\r\n                        </Card.Meta>\r\n                        <Card.Description>\r\n                            {website}\r\n                        </Card.Description>\r\n                        </Card.Content>\r\n                        <Card.Content extra>\r\n                        <a>\r\n                            <Icon name='home' />\r\n                            {address}\r\n                        </a>\r\n                        </Card.Content>\r\n                    </Card>\r\n                \r\n                    \r\n                    \r\n    \r\n\r\n        \r\n\r\n                    </li>\r\n\r\n      );\r\n}\r\n \r\nexport default UserItem;",{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":12,"column":16,"nodeType":"209","messageId":"210","endLine":12,"endColumn":26},{"ruleId":"207","severity":1,"message":"211","line":28,"column":7,"nodeType":"209","messageId":"210","endLine":28,"endColumn":16},{"ruleId":"207","severity":1,"message":"212","line":2,"column":8,"nodeType":"209","messageId":"210","endLine":2,"endColumn":15},{"ruleId":"207","severity":1,"message":"213","line":3,"column":8,"nodeType":"209","messageId":"210","endLine":3,"endColumn":15},{"ruleId":"207","severity":1,"message":"214","line":4,"column":8,"nodeType":"209","messageId":"210","endLine":4,"endColumn":12},{"ruleId":"207","severity":1,"message":"215","line":5,"column":24,"nodeType":"209","messageId":"210","endLine":5,"endColumn":33},{"ruleId":"207","severity":1,"message":"216","line":15,"column":8,"nodeType":"209","messageId":"210","endLine":15,"endColumn":19},{"ruleId":"207","severity":1,"message":"217","line":50,"column":18,"nodeType":"209","messageId":"210","endLine":50,"endColumn":26},{"ruleId":"207","severity":1,"message":"218","line":7,"column":15,"nodeType":"209","messageId":"210","endLine":7,"endColumn":26},{"ruleId":"207","severity":1,"message":"219","line":29,"column":15,"nodeType":"209","messageId":"210","endLine":29,"endColumn":16},{"ruleId":"207","severity":1,"message":"220","line":1,"column":49,"nodeType":"209","messageId":"210","endLine":1,"endColumn":54},{"ruleId":"207","severity":1,"message":"212","line":2,"column":8,"nodeType":"209","messageId":"210","endLine":2,"endColumn":15},{"ruleId":"207","severity":1,"message":"213","line":3,"column":8,"nodeType":"209","messageId":"210","endLine":3,"endColumn":15},{"ruleId":"207","severity":1,"message":"214","line":4,"column":8,"nodeType":"209","messageId":"210","endLine":4,"endColumn":12},{"ruleId":"207","severity":1,"message":"221","line":5,"column":8,"nodeType":"209","messageId":"210","endLine":5,"endColumn":10},{"ruleId":"207","severity":1,"message":"222","line":16,"column":8,"nodeType":"209","messageId":"210","endLine":16,"endColumn":18},{"ruleId":"207","severity":1,"message":"223","line":17,"column":8,"nodeType":"209","messageId":"210","endLine":17,"endColumn":15},{"ruleId":"207","severity":1,"message":"224","line":36,"column":26,"nodeType":"209","messageId":"210","endLine":36,"endColumn":31},{"ruleId":"207","severity":1,"message":"217","line":25,"column":15,"nodeType":"209","messageId":"210","endLine":25,"endColumn":23},{"ruleId":"207","severity":1,"message":"225","line":20,"column":8,"nodeType":"209","messageId":"210","endLine":20,"endColumn":14},{"ruleId":"207","severity":1,"message":"226","line":22,"column":8,"nodeType":"209","messageId":"210","endLine":22,"endColumn":12},{"ruleId":"207","severity":1,"message":"227","line":75,"column":56,"nodeType":"209","messageId":"210","endLine":75,"endColumn":60},{"ruleId":"207","severity":1,"message":"228","line":3,"column":11,"nodeType":"209","messageId":"210","endLine":3,"endColumn":17},{"ruleId":"203","replacedBy":"229"},{"ruleId":"205","replacedBy":"230"},{"ruleId":"207","severity":1,"message":"212","line":2,"column":8,"nodeType":"209","messageId":"210","endLine":2,"endColumn":15},{"ruleId":"207","severity":1,"message":"213","line":3,"column":8,"nodeType":"209","messageId":"210","endLine":3,"endColumn":15},{"ruleId":"207","severity":1,"message":"214","line":4,"column":8,"nodeType":"209","messageId":"210","endLine":4,"endColumn":12},{"ruleId":"207","severity":1,"message":"231","line":7,"column":8,"nodeType":"209","messageId":"210","endLine":7,"endColumn":16},{"ruleId":"207","severity":1,"message":"222","line":8,"column":8,"nodeType":"209","messageId":"210","endLine":8,"endColumn":18},{"ruleId":"207","severity":1,"message":"232","line":9,"column":10,"nodeType":"209","messageId":"210","endLine":9,"endColumn":27},{"ruleId":"207","severity":1,"message":"233","line":9,"column":30,"nodeType":"209","messageId":"210","endLine":9,"endColumn":40},{"ruleId":"207","severity":1,"message":"234","line":12,"column":10,"nodeType":"209","messageId":"210","endLine":12,"endColumn":14},{"ruleId":"207","severity":1,"message":"235","line":13,"column":9,"nodeType":"209","messageId":"210","endLine":13,"endColumn":14},{"ruleId":"207","severity":1,"message":"236","line":22,"column":11,"nodeType":"209","messageId":"210","endLine":22,"endColumn":15},{"ruleId":"207","severity":1,"message":"237","line":23,"column":11,"nodeType":"209","messageId":"210","endLine":23,"endColumn":15},{"ruleId":"207","severity":1,"message":"228","line":1,"column":10,"nodeType":"209","messageId":"210","endLine":1,"endColumn":16},{"ruleId":"207","severity":1,"message":"215","line":1,"column":24,"nodeType":"209","messageId":"210","endLine":1,"endColumn":33},{"ruleId":"207","severity":1,"message":"238","line":1,"column":41,"nodeType":"209","messageId":"210","endLine":1,"endColumn":46},{"ruleId":"207","severity":1,"message":"239","line":1,"column":49,"nodeType":"209","messageId":"210","endLine":1,"endColumn":55},{"ruleId":"207","severity":1,"message":"240","line":3,"column":8,"nodeType":"209","messageId":"210","endLine":3,"endColumn":14},{"ruleId":"207","severity":1,"message":"241","line":7,"column":8,"nodeType":"209","messageId":"210","endLine":7,"endColumn":18},{"ruleId":"207","severity":1,"message":"242","line":8,"column":8,"nodeType":"209","messageId":"210","endLine":8,"endColumn":15},{"ruleId":"207","severity":1,"message":"243","line":10,"column":10,"nodeType":"209","messageId":"210","endLine":10,"endColumn":18},{"ruleId":"207","severity":1,"message":"233","line":11,"column":10,"nodeType":"209","messageId":"210","endLine":11,"endColumn":20},{"ruleId":"207","severity":1,"message":"244","line":15,"column":11,"nodeType":"209","messageId":"210","endLine":15,"endColumn":18},{"ruleId":"245","severity":1,"message":"246","line":34,"column":25,"nodeType":"247","endLine":34,"endColumn":28},"no-native-reassign",["248"],"no-negated-in-lhs",["249"],"no-unused-vars","'ApolloLink' is defined but never used.","Identifier","unusedVar","'splitLink' is assigned a value but never used.","'school1' is defined but never used.","'school2' is defined but never used.","'egod' is defined but never used.","'Container' is defined but never used.","'ImageUpload' is defined but never used.","'response' is assigned a value but never used.","'useMutation' is defined but never used.","'s' is assigned a value but never used.","'Modal' is defined but never used.","'G1' is defined but never used.","'PostUpload' is defined but never used.","'UseForm' is defined but never used.","'error' is assigned a value but never used.","'upload' is defined but never used.","'test' is defined but never used.","'name' is assigned a value but never used.","'Button' is defined but never used.",["248"],["249"],"'PostList' is defined but never used.","'FETCH_POSTS_QUERY' is defined but never used.","'FETCH_USER' is defined but never used.","'Icon' is defined but never used.","'Image' is defined but never used.","'date' is assigned a value but never used.","'auth' is assigned a value but never used.","'Label' is defined but never used.","'Loader' is defined but never used.","'moment' is defined but never used.","'LikeButton' is defined but never used.","'MyPopup' is defined but never used.","'useQuery' is defined but never used.","'context' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]